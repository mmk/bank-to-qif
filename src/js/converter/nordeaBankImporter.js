/*
 * Import transactions from CSV generated by Nordea's online bank.
 */

'use strict';

var _        = require('underscore');
var csvParse = require('csv-parse');
var Q        = require('q');

var importerHelper = require('./importerHelper');

var generateMemoProperty = function (record) {
    var transactionTypeField = record[7].trim();
    var messageField = record[10].trim();
    var memo = '';

    if (transactionTypeField.length === 0) {
        memo = messageField;
    }
    else if (messageField.length === 0) {
        memo = transactionTypeField;
    }
    else {
        memo = transactionTypeField + ' / ' + messageField;
    }

    if (memo.match(/itsepalvelu/i) || memo.match(/korttiosto/i)) {
        return null; // No memo needed for card payments or ATM withdrawals
    }

    return memo.length > 0 ? memo : null;
};

var generateTransaction = function (record) {
    /*
     * CSV field reference:
     *
     * 'Kirjauspäivä', 'Arvopäivä', 'Maksupäivä', 'Määrä', 'Saaja/Maksaja', 'Tilinumero',
     * 'BIC', 'Tapahtuma', 'Viite', 'Maksajan viite', 'Viesti', 'Kortinnumero', 'Kuitti'
     */

    if (!_.isArray(record) || record.length < 13) {
        return null;
    }

    var transaction = {};

    transaction.date = importerHelper.parseDate(record[2]);
    transaction.dateStr = importerHelper.dateToString(transaction.date);

    transaction.payee = record[4];

    transaction.amount = importerHelper.parseAmount(record[3]);
    transaction.amountStr = (transaction.amount ? transaction.amount.toFixed(2) : null);

    transaction.targetAccountDescription = record[5];

    // Categorization is handled outside of the importer
    transaction.category = null;

    transaction.memo = generateMemoProperty(record);

    if (!transaction.date || !transaction.dateStr || !transaction.amount || !transaction.amountStr) {
        return null;
    }

    return transaction;
};

var isSupportedFile = function (fileContent) {
    if (typeof(fileContent) !== 'string') {
        return false;
    }

    var fileRows = fileContent.split("\n");

    var expectedThirdRowRegExp =
        new RegExp("^Kirjauspäivä\tArvopäivä\tMaksupäivä\tMäärä\tSaaja/Maksaja\tTilinumero\tBIC\tTapahtuma\tViite\tMaksajan viite\tViesti\tKortinnumero\tKuitti");

    var validFile =
        fileRows.length >= 3 &&
        fileRows[0].indexOf('Tilinumero') === 0 &&
        fileRows[2].match(expectedThirdRowRegExp);

    return !!validFile;
};

var importTransactions = function (fileContent) {
    var deferred = Q.defer();

    if (!isSupportedFile(fileContent)) {
        deferred.reject(new Error('Input file not recognized as a Nordea file'));
        return deferred.promise;
    }

    var transactions = [];

    csvParse(fileContent, {delimiter: "\t"}, function (err, data) {
        var success = _.every(data, function (record, index) {
            if (index < 3 || record.length === 1) {
                return true; // Skip the header and empty rows
            }

            var transaction = generateTransaction(record);
            if (!transaction) {
                deferred.reject(new Error('Corrupted content in Nordea input file'));
                return false;
            }

            transactions.push(transaction);
            return true;
        });

        if (success) {
            deferred.resolve(transactions);
        }
    });

    return deferred.promise;
};

module.exports = {
    isSupportedFile: isSupportedFile,
    importTransactions: importTransactions
};
