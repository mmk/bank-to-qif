/*
 * Import transactions from CSV generated by Nordea's online bank.
 */

'use strict';

var _        = require('underscore');
var csvParse = require('csv-parse');
var Q        = require('q');

var generateMemoProperty = function (record) {
    var transactionTypeField = record[7].trim();
    var messageField = record[10].trim();
    var memo = '';

    if (transactionTypeField.length === 0) {
        memo = messageField;
    }
    else if (messageField.length === 0) {
        memo = transactionTypeField;
    }
    else {
        memo = transactionTypeField + ' / ' + messageField;
    }

    if (memo.match(/itsepalvelu/i) || memo.match(/korttiosto/i)) {
        return null; // No memo needed for card payments or ATM withdrawals
    }

    return memo.length > 0 ? memo : null;
};

var generateTransaction = function (record) {
    /*
     * CSV field reference:
     *
     * 'Kirjauspäivä', 'Arvopäivä', 'Maksupäivä', 'Määrä', 'Saaja/Maksaja', 'Tilinumero',
     * 'BIC', 'Tapahtuma', 'Viite', 'Maksajan viite', 'Viesti', 'Kortinnumero', 'Kuitti'
     */

    var transaction = {};

    // Convert date to "MM/DD/YYYY" format
    transaction.date = record[2].replace(/(\d+)\.(\d+)\.(\d+)/, '$2/$1/$3');

    transaction.payee = record[4];

    // Replace comma with dot as decimal separator and remove all whitespace
    transaction.amount = record[3].replace(/,/, '.').replace(/\s/g, '');

    // Categorization is handled outside of the importer
    transaction.category = null;

    transaction.memo = generateMemoProperty(record);

    return transaction;
};

var isSupportedFile = function (fileContent) {
    if (typeof(fileContent) !== 'string') {
        return false;
    }

    var fileRows = fileContent.split("\n");

    var expectedThirdRowRegExp =
        new RegExp("^Kirjauspäivä\tArvopäivä\tMaksupäivä\tMäärä\tSaaja/Maksaja\tTilinumero\tBIC\tTapahtuma\tViite\tMaksajan viite\tViesti\tKortinnumero\tKuitti");

    var validFile =
        fileRows.length >= 3 &&
        fileRows[0].indexOf('Tilinumero') === 0 &&
        fileRows[2].match(expectedThirdRowRegExp);

    return !!validFile;
};

var importTransactions = function (fileContent) {
    var deferred = Q.defer();

    if (!isSupportedFile(fileContent)) {
        deferred.reject(new Error('Input file not supported by NordeaBankImporter'));
        return deferred.promise;
    }

    var transactions = [];

    csvParse(fileContent, {delimiter: "\t"}, function (err, data) {
        _.each(data, function (record, index) {
          if (index < 3 || record.length === 1) {
              return; // Skip the header and empty rows
          }

          transactions.push(generateTransaction(record));

        });

        deferred.resolve(transactions);
    });

    return deferred.promise;
};

module.exports = {
    isSupportedFile: isSupportedFile,
    importTransactions: importTransactions
};
