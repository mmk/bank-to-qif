/*
 * Import transactions from CSV generated by OP's online bank.
 */

'use strict';

var _        = require('underscore');
var csvParse = require('csv-parse');
var Q        = require('q');

var generatePayeeProperty = function (record) {
    var explanationField = record[4].trim();

    if (explanationField === 'AUTOMAATTINOSTO') {
        return 'Automaattinosto';
    }

    return record[5];
};

var generateMemoProperty = function (record) {
    var explanationField = record[4].trim();
    var messageField = record[8].trim();

    if (explanationField === 'PKORTTIMAKSU') {
        return null; // No memo needed for card payments
    }

    messageField = messageField.replace(/^Viesti: /, '');

    return messageField.length > 0 ? messageField : null;
};

var generateTransaction = function (record) {
    /*
     * CSV field reference:
     *
     * 'Kirjauspäivä', 'Arvopäivä', 'Määrä  EUROA', 'Laji', 'Selitys', 'Saaja/Maksaja',
     * 'Saajan tilinumero ja pankin BIC', 'Viite', 'Viesti', 'Arkistointitunnus'
     */

    var transaction = {};

    // Convert date to "MM/DD/YYYY" format
    transaction.date = record[0].replace(/(\d+)\.(\d+)\.(\d+)/, '$2/$1/$3');

    transaction.payee = generatePayeeProperty(record);

    // Replace comma with dot as decimal separator and remove all whitespace
    transaction.amount = record[2].replace(/,/, '.').replace(/\s/g, '');

    // Categorization is handled outside of the importer
    transaction.category = null;

    // TODO: Should we append memo to payee field so that it shows up in GnuCash?
    transaction.memo = generateMemoProperty(record);

    return transaction;
};

var isSupportedFile = function (fileContent) {
    var expectedHeader =
        'Kirjauspäivä;Arvopäivä;Määrä. EUROA;Laji;Selitys;Saaja/Maksaja;Saajan tilinumero ja pankin BIC;Viite;Viesti;Arkistointitunnus';
    var re = new RegExp(expectedHeader);

    if (typeof(fileContent) === 'string') {
        // The header line may or may not contain quotes, so remove all of them before matching
        fileContent = fileContent.replace(/"/g, '');
        return !!fileContent.match(re);
    }

    return false;
};

var importTransactions = function (fileContent) {
    var deferred = Q.defer();
    var transactions = [];

    if (!this.isSupportedFile(fileContent)) {
        deferred.reject(new Error('Input file not supported by OPBankImporter'));
        return deferred.promise;
    }

    csvParse(fileContent, {delimiter: ';'}, function (err, data) {
        _.each(data, function (record, index) {
          if (index === 0 || record.length === 1) {
              return; // Skip the header and empty lines
          }

          transactions.push(generateTransaction(record));
        }, this);

        deferred.resolve(transactions);
    });

    return deferred.promise;
};

module.exports = {
    isSupportedFile: isSupportedFile,
    importTransactions: importTransactions
};
